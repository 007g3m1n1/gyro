#!/bin/bash

ACCOUNTS=()
PROJECTS=()
PROJECTS_ENVS=()

# Return the index of the account given in $1
find_account() {
    account_index=0

    for account in "${ACCOUNTS[@]}";
    do
        if [ "$1" = "$account" ]; then
            return
        fi

        ((account_index+=1))
    done;

    account_index=-1
}

generate_cache() {
    mkdir -p $HOME/.beam

    echo "projects:" > $HOME/.beam/projects.yml.tmp

    local YML ACCOUNT PROJECT PROJECT_DIR PROJECT_ENV
    YML=`mdfind -name network.yml -onlyin $HOME`
    for network in $YML;
    do
        ACCOUNT=`grep account: $network | cut -d ':' -f 2 | tr -d [:blank:]`
        PROJECT=`grep ^name: $network | cut -d ':' -f 2 | tr -d [:blank:]`

        find_account $ACCOUNT
        if [ "$account_index" == "-1" ] && [ "$ACCOUNT" != "\${account}" ]; then
            ACCOUNTS+=($ACCOUNT)
        fi
        find_account $ACCOUNT

        if [ "$PROJECT" != "\${project}" ]; then
            if [ "$account_index" == "-1" ]; then
                PROJECTS+=("$PROJECT ")
            else
                if [[ "${PROJECTS[*]}" != *"${PROJECT}"* ]]; then
                    PROJECTS[$account_index]+="$PROJECT "
                fi
            fi

            PROJECT_DIR=`dirname $network`
            echo "  - name: $PROJECT" >> $HOME/.beam/projects.yml.tmp 
            echo "    path: $PROJECT_DIR" >> $HOME/.beam/projects.yml.tmp 
            echo "" >> $HOME/.beam/projects.yml.tmp

            for env in `ls $PROJECT_DIR/*.yml`
            do
                PROJECT_ENV=`basename $env`
                PROJECTS_ENVS+=("$PROJECT:`echo $PROJECT_ENV | cut -d '.' -f1`")
            done
        fi
    done;

    mv $HOME/.beam/projects.yml.tmp $HOME/.beam/projects.yml

    >$HOME/.beam/completion.account.cache
    for p in "${ACCOUNTS[@]}";
    do
        echo "${p}" >> $HOME/.beam/completion.account.cache
    done

    >$HOME/.beam/completion.project.cache
    for p in "${PROJECTS[@]}";
    do
        echo "${p}" >> $HOME/.beam/completion.project.cache
    done

    >$HOME/.beam/completion.project_env.cache
    for p in "${PROJECTS_ENVS[@]}";
    do
        echo "${p}" >> $HOME/.beam/completion.project_env.cache
    done
}

EXPIRED=`find $HOME/.beam/completion.* -mtime +6h 2>/dev/null | wc -l`
if [ ! -e $HOME/.beam/completion.account.cache ] || [ "$EXPIRED" -ne 0 ]; then
    generate_cache
else
    while read line; 
    do
        ACCOUNTS+=($line)
    done < $HOME/.beam/completion.account.cache

    while read line; 
    do
        PROJECTS+=("$line")
    done < $HOME/.beam/completion.project.cache

    while read line; 
    do
        PROJECTS_ENVS+=("$line")
    done < $HOME/.beam/completion.project_env.cache
fi

_beam() 
{
    COMP_WORDBREAKS=${COMP_WORDBREAKS//:}

    local cur prev opts base
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    cmd="${COMP_WORDS[1]}"

    if [ "$prev" = "beam" ]; then
        cmd="beam"
    fi

    opts="audit console copy credentials down help iam init list mark primary provision service ssh status up version"

    #
    #  Complete the arguments to some of the basic commands.
    #
    case "${cmd}" in
        credentials)
            case "${COMP_CWORD}" in
                2) COMPREPLY=( $(compgen -W "${ACCOUNTS[*]}" -- ${cur}) )
                   return 0
                   ;;
                3) find_account $prev 
                   p=${PROJECTS[$account_index]}
                   COMPREPLY=( $(compgen -W "${p[*]}" -- ${cur}) )
                   return 0
                   ;;
            esac
            ;;
        beam)
            COMPREPLY=($(compgen -W "${opts}" -- ${cur}))  
            return 0
            ;;
        list|ssh|down|up)
            if [ "${COMP_CWORD}" = "2" ]; then
                ENVS=${PROJECTS_ENVS[@]}
                if [ -e "network.yml" ]; then
                    for env in `ls *.yml`
                    do
                        ENVS+=(`echo $env | cut -d '.' -f1`)
                    done
                fi

                COMPREPLY=($(compgen -W "${ENVS[*]}" -- ${cur}))  
                return 0
            fi
            ;;
        *)
        ;;
    esac

   return 0
}
complete -F _beam beam
