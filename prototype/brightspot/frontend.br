virtual_resource
    project-name
    environment
    serial
    subdomain
    vpc
    key-pair
    hosted-zone
    elb-subnets
    frontend-subnets
define
    resource aws.security-group elb
        vpc-id: @(aws.vpc vpc | vpc-id)

        add ingress
            from-port: 80
            to-port: 80
            protocol: tcp
            cidr-block: 0.0.0.0/0
        end

        add ingress
            from-port: 443
            to-port: 443
            protocol: tcp
            cidr-block: 0.0.0.0/0
        end
    end

    resource aws.elastic-load-balancer elb
        name: $(project-name)-web-$(serial)

        add listener
            load-balancer-port: 80
            instance-protocol: http
            instance-port: 80
        end

        add listener
            load-balancer-port: 443
            instance-protocol: https
            instance-port: 80
        end

        add health-check
            protocol: http
            port: 80
            path: /_ping
            timeout: 5
            interval: 6
            unhealthy-threshold: 2
            healthy-threshold: 2
        end

        subnets: #(aws.subnet elb-subnets | subnet-id)
        security-groups-ids: [@(aws.security-group elb | security-group-ids)]
    end

    resource aws.hosted-zone-record prod.$subdomainend
        zone-id: @(aws.hosted-zone hosted-zone | zone-id)
        name: prod.$(subdomain)
        type: CNAME
        ttl: 300
        records: [@(aws.elastic-load-balancer web | canonical-hosted-zone-name)]
    end

    resource aws.security-group security-group
        vpc-id: @(aws.vpc vpc | vpc-id)

        add ingress
            from-port: 80
            to-port: 80
            protocol: tcp
            security-groups: [@(aws.security-group elb | security-group-id)]
        end

        add ingress
            from-port: 22
            to-port: 22
            protocol: tcp
            security-groups: [@(aws.security-group elb | security-group-id)]
        end

        add ingress
            from-port: 80
            to-port: 80
            protocol: tcp
            security-groups: [@(aws.security-group elb | security-group-id)]
        end

        add ingress
            from-port: 8080
            to-port: 8080
            protocol: tcp
            security-groups: [@(aws.security-group elb | security-group-id)]
        end
    end

    resource aws.launch-configuration launch-configuration
        name: $(project-name) frontend $(environment) v$(serial)

        image: ami-0ddcc69ab30ed9c03
        instance-type: t2.medium
        key-pair: @(aws.key-pair key-pair | name)

        security-groups: [@(aws.security-group frontend | security-group-id)]
    end

    resource aws.autoscaling-group autoscaling-group
        autoscale-group-name: @(aws.launch-configuration frontend | name)
        launch-configuration-name: @(aws.launch-configuration frontend | name)
        load-balancer-names: [@(aws.elastic-load-balancer web | name)]
        vpc-zone-identitiers: #(aws.subnet frontend-subnets | subnet-id)
        default-cool-down: 300
        health-check-type: ec2

        minSize: 4
        maxSize: 8

        tags: $project.defaultTags
    end

end
