import "../project.beam" as project
import "../vpc.beam" as vpc
import "../gateway.beam" as gateway

aws::security_group $elb-security-group {
    vpcId: ${vpc.vpc.vpcId}
        
    ingress {
        fromPort: 80
        toPort: 80
        protocol: "tcp"
        cidrBlock: "0.0.0.0/0"
    }

    ingress {
        fromPort: 443
        toPort: 443
        protocol: "tcp"
        cidrBlock: "0.0.0.0/0"
    }
}

aws::elastic_load_balancer $web {
    name: "${project.name}-web-${project.serial}" 

    listener {
        loadBalancerPort: 80
        instanceProtocol: "http"
        instancePort: 80
    }

    listener {
        loadBalancerPort: 443
        instanceProtocol: "https"
        instancePort: 80
    }

    healthCheck {
        protocol: "http"
        port: 80
        path: "/_ping"
        timeout: 5
        interval: 6
        unhealthyThreshold: 2
        healthyThreshold: 2
    }

    subnets: ${vpc.publicSubnets}
    securityGroups: [${elb-security-group}]
}

aws::hosted_zone_record "prod.${project.subdomain}" {
    zoneId: ${route53.public.zoneId}
    name: "prod.${project.subdomain}"
    type: "CNAME"
    ttl: 300
    records: [${web.canonicalHostedZoneName}]
}

aws::security_group $frontend-security-group {
    vpcId: ${vpc.vpc.vpcId}
        
    ingress {
        fromPort: 80
        toPort: 80
        protocol: "tcp"
        securityGroups: [${elb-security-group}] 
    }

    ingress {
        fromPort: 22
        toPort: 22
        protocol: "tcp"
        securityGroups: [${gateway.security-group}] 
    }

    ingress {
        fromPort: 80
        toPort: 80
        protocol: "tcp"
        securityGroups: [${gateway.security-group}] 
    }

    ingress {
        fromPort: 8080
        toPort: 8080
        protocol: "tcp"
        securityGroups: [${gateway.security-group}] 
    }
}

aws::launch_configuration $frontend-launch-config {
    name: "${project.name} frontend ${project.environment} v${project.serial}"

    keyPair: ${project.project-key-pair}
    instanceType: "t2.medium"
    image: "ami-0ddcc69ab30ed9c03"

    securityGroups: [${frontend-security-group}]
}

aws::autoscaling_group $frontend-autoscaling-group {
    launchConfigurationName: ${frontend-launch-config.name} 
    loadBalancerNames: [${web.name}]
    vpcZoneIdentitiers: ${vpc.privateSubnets}
    defaultCoolDown: 300
    healthCheckType: "ec2"
    
    minSize: 4
    maxSize: 8

    tags: ${project.defaultTags}

    aws::autoscaling_policy $high-cpu-scale-up {
        name: "high-cpu-scale-up"
        adjustmentType: "ChangeInCapacity"
        scalingAdjustment: 4
        coolDown: 120
    }

    aws::cloudwatch_metric_alarm $frontend-autoscaling-cpu-high {
        name: "${high-cpu-scale-up.name}"
        metricName: "CPUUtilization"
        namespace: "AWS/EC2"
        evaluationPeriods: 1
        period: 60
        threshold: 60
        statistic: "Average"
        comparisonOperator: "GreaterThanThreshold"

        dimensions: {
            AutoScalingGroupName: "${frontend-autoscaling-group.name}"
        }

        alarmActions: [${high-cpu-scale-up.arn}]
    }

    aws::autoscaling_policy $high-cpu-scale-down {
        name: "high-cpu-scale-down"
        adjustmentType: "ChangeInCapacity"
        scalingAdjustment: -4
        coolDown: 300
    }

    aws::cloudwatch_metric_alarm $frontend-autoscaling-cpu-low {
        name: "${high-cpu-scale-down.name}"
        metricName: "CPUUtilization"
        namespace: "AWS/EC2"
        evaluationPeriods: 1
        period: 300
        threshold: 20
        statistic: "Average"
        comparisonOperator: "LessThanThreshold"

        dimensions: {
            AutoScalingGroupName: "${frontend-autoscaling-group.name}"
        }

        alarmActions: [${high-cpu-scale-down.arn}]
    }

