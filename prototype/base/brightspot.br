use project

aws.autoscaling-policy high-cpu-scale-up
    name: high-cpu-scale-up
    autoscale-group-name: @(aws.autoscaling-group web.frontend | autoscale-group-name)
    adjustment-type: ChangeInCapacity
    scaling-adjustment: 4
    cool-down: 120
end

subnet:
    * zone-b: 10.0.2.0/24
    * zone-c: 10.0.3.0/24


azurerm.virtual-network example
    name: example-network
    resource-group-name: azurerm_resource_group.test.name
    address-space: 10.0.0.0/16
    location: West US

    for name, subnet, value in $(subnet):
        subnet
            name: $(name)
            address-prefix: $(subnet)
            foo: $(value)
        end
    end
end

for zone, cidr in $(project.zones):
    aws.subnet public-$(zone) public
        name: $(project.NAME) $(zone)

        vpc-id: @(aws.vpc vpc | vpc-id)
        cidr-block: $(cidr)
        availability-zone: $(zone)
        assign-public-ip-v4-address: true
    end
end

@aws.acm-certificate acm-certificate
    domain: mydomain.com
    statuses: [ISSUED]
end

for zone in $(project.zones):
    name: backend
    if @(aws::subnet vpc.public-us-east-1a | name) == us-east-1b or
       @(aws::subnet vpc.public-us-east-1a | zone) == us-east-1b:
        name: master
        do-master-stuff: true
    elseif foobar == bar:
        name: othername
    else:
        name: backend
    end

    aws.instance $(name)-$(zone) $(name)
        image: ami-04aaab62bebf49db8
        instance-type: t2.medium
        iam-instance-profile: @(aws.iam-instance-profile $(name) | name)
        security-group-ids: #(aws.security-group $(name) project.operation | security-group-id)
        subnet-id: @(aws.subnet vpc.public-us-east-1a | subnet-id)
        key-pair: @(aws.key-pair project.key-pair | name)
    en

    if $(do-master-stuff):
        lasdjfladjfaldj
end

zones:
    - us-east-1a
    - us-east-1b

do-the-thing: true

for instance in [1, 2, 3]:
    if $do-the-thing:
        aws.instance $(name)-$(zone) $(name)
            image: ami-04aaab62bebf49db8
            instance-type: t2.medium
            iam-instance-profile: @(aws.iam-instance-profile $(name) | name)
            security-group-ids: #(aws.security-group $(name) project.operation | security-group-id)
            subnet-id: @(aws.subnet vpc.public-us-east-1a | subnet-id)
            key-pair: @(aws.key-pair project.key-pair | name)
        end
end

resource frontend
    project-name
    environment
    serial
    subdomain
    vpc
    key-pair
    hosted-zone
    elb-subnets
    frontend-subnets
define
    resource aws.security-group elb
        vpc-id: @(aws.vpc vpc | vpc-id)

        add ingress
            from-port: 80
            to-port: 80
            protocol: tcp
            cidr-block: 0.0.0.0/0
        end

        add ingress
            from-port: 443
            to-port: 443
            protocol: tcp
            cidr-block: 0.0.0.0/0
        end
    end

    resource aws.elastic-load-balancer elb
        name: $(project-name)-web-$(serial)

        add listener
            load-balancer-port: 80
            instance-protocol: http
            instance-port: 80
        end

        add listener
            load-balancer-port: 443
            instance-protocol: https
            instance-port: 80
        end

        add health-check
            protocol: http
            port: 80
            path: /_ping
            timeout: 5
            interval: 6
            unhealthy-threshold: 2
            healthy-threshold: 2
        end

        subnets: #(aws.subnet elb-subnets | subnet-id)
        security-groups-ids: [@(aws.security-group elb | security-group-ids)]
    end

    resource aws.hosted-zone-record prod.$subdomainend
        zone-id: @(aws.hosted-zone hosted-zone | zone-id)
        name: prod.$(subdomain)
        type: CNAME
        ttl: 300
        records: [@(aws.elastic-load-balancer web | canonical-hosted-zone-name)]
    end

    resource aws.security-group security-group
        vpc-id: @(aws.vpc vpc | vpc-id)

        add ingress
            from-port: 80
            to-port: 80
            protocol: tcp
            security-groups: [@(aws.security-group elb | security-group-id)]
        end

        add ingress
            from-port: 22
            to-port: 22
            protocol: tcp
            security-groups: [@(aws.security-group elb | security-group-id)]
        end

        add ingress
            from-port: 80
            to-port: 80
            protocol: tcp
            security-groups: [@(aws.security-group elb | security-group-id)]
        end

        add ingress
            from-port: 8080
            to-port: 8080
            protocol: tcp
            security-groups: [@(aws.security-group elb | security-group-id)]
        end
    end

    resource aws.launch-configuration launch-configuration
        name: $(project-name) frontend $(environment) v$(serial)

        image: ami-0ddcc69ab30ed9c03
        instance-type: t2.medium
        key-pair: @(aws.key-pair key-pair | name)

        security-groups: [@(aws.security-group frontend | security-group-id)]
    end

    resource aws.autoscaling-group autoscaling-group
        autoscale-group-name: @(aws.launch-configuration frontend | name)
        launch-configuration-name: @(aws.launch-configuration frontend | name)
        load-balancer-names: [@(aws.elastic-load-balancer web | name)]
        vpc-zone-identitiers: #(aws.subnet frontend-subnets | subnet-id)
        default-cool-down: 300
        health-check-type: ec2

        minSize: 4
        maxSize: 8

        tags: $project.defaultTags
    end

end
