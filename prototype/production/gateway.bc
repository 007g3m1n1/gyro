import project
import vpc
import route53

import frontend
import backend

ENVIRONMENT: production

resource aws.security-group security-group
    vpc-id: @(aws.vpc vpc.vpc | vpc-id)
        
    add ingress
        from-port: 0
        to-port: 0
        protocol: -1

        security-groups: [
            @(aws.security-group frontend.security-group | security-group-id),
            @(aws.security-group backend.security-group | security-group-id)
        ] 
    end

    // OpenVPN
    add ingress
        from-port: 1194
        to-port: 1194
        protocol: udp
        cidr-block: 0.0.0.0/0
    end

    // Office & VPN IPs
    add ingress
        from-port: 22
        to-port: 22
        protocol: tcp
        cidr-block: 52.5.144.128/32
    end
end

resource aws.iam-role gateway-role
    name: $(project.NAME)-$(ENVIRONMENT)-$(project.SERIAL)-gateway
end

resource aws.iam-role-policy gateway-beam-server-readonly-policy
    role-name: @(aws.iam-role gateway-role | name)
    name: beam-server-readonly
    path: roles/beam-server-readonly.json
end

resource aws.iam-instance-profile gateway-instance-role
    name: @(aws.iam-role-policy gateway-beam-server-readonly-policy | name)
end

resource aws.instance us-east-1a
    image: ami-04aaab62bebf49db8
    instance-type: t2.medium
    private-ip: 10.0.0.10
    associate-public-ip-address: true
    source-dest-check: false
    iam-instance-profile: @(aws.iam-instance-profile gateway-instance-role | name)
    security-group-ids:
        - @(aws.security-group security-group | security-group-id),
        - @(aws.security-group project.operation | security-group-id)
    subnet-id: @(aws.subnet vpc.public-us-east-1a | subnet-id)
    key-pair: @(aws.key-pair project.key-pair | name)

    tags:
        Project: $(project.NAME)
        Serial: $(project.SERIAL)
        beam.environment: $(ENVIRONMENT)
    end
end

resource aws.instance us-east-1b
    image: ami-04aaab62bebf49db8
    instance-type: t2.medium
    private-ip: 10.0.1.10
    associate-public-ip-address: true
    source-dest-check: false
    iam-instance-profile: @(aws.iam-instance-profile gateway-instance-role | name)
    security-group-ids:
        - @(aws.security-group security-group | security-group-id),
        - @(aws.security-group project.operation | security-group-id)
    subnet-id: @(aws.subnet vpc.public-us-east-1a | subnet-id)
    key-pair: @(aws.key-pair project.key-pair | name)

    tags:
        Project: $project.NAMEend
        Serial: $project.SERIALend
        beam.environment: $ENVIRONMENTend
    end
end

resource aws.instance us-east-1c
    image: ami-04aaab62bebf49db8
    instance-type: t2.medium
    private-ip: 10.0.2.10
    associate-public-ip-address: true
    source-dest-check: false
    iam-instance-profile: @(aws.iam-instance-profile gateway-instance-role | name)
    security-group-ids: [
        @(aws.security-group security-group | security-group-id),
        @(aws.security-group project.operation | security-group-id)
    ]
    subnet-id: @(aws.subnet vpc.public-us-east-1a | subnet-id)
    key-pair: @(aws.key-pair project.key-pair | name)

    tags:
        Project: $project.NAMEend
        Serial: $project.SERIALend
        beam.environment: $ENVIRONMENTend
    end
end

resource aws.hosted-zone-record vpn.$project.SUBDOMAIN
    zone-id: @(aws.hosted-zone route53.public | zone-id)
    name: vpn.$project.SUBDOMAINend
    type: A
    ttl: 300
    records:
        - @(aws.instance us-east-1a | public-ip-address),
        - @(aws.instance us-east-1b | public-ip-address),
        - @(aws.instance us-east-1c | public-ip-address)
end
